==========================
Simple strings
==========================

val oneLineString = "I'm just on one line"

val multiLineString = """
  a
  $thisIsntInterpolated
  ${thisEither}
"""

---

(compilation_unit
  (val_definition (identifier) (string))
  (val_definition (identifier) (string)))

==========================
Interpolated strings
==========================

val string1 = s"a $b ${c}"

val string2 = f"hi $name%s"

val string3 = raw"Not a new line \n${ha}"

val string4 = s"""
works even in multiline strings, ${name}
"""
val string5 = s"foo$$"
---

(compilation_unit
  (val_definition
    (identifier)
    (interpolated_string_expression
      (identifier) (interpolated_string
        (interpolation (identifier))
        (interpolation (block (identifier))))))
  (val_definition
    (identifier)
    (interpolated_string_expression
      (identifier) (interpolated_string
        (interpolation (identifier)))))
  (val_definition
    (identifier)
    (interpolated_string_expression
      (identifier) (interpolated_string
        (interpolation (block (identifier))))))
  (val_definition
    (identifier)
    (interpolated_string_expression
      (identifier) (interpolated_string
        (interpolation (block (identifier))))))
  (val_definition (identifier) (interpolated_string_expression
    (identifier) (interpolated_string (interpolation)))))

==========================
Floating point numbers
==========================

val string = 3.14
val numWithFloatType = 2.71828f
val numWithDoubleType = 2.71828D
val numWithExponent = 1.234e456

---

(compilation_unit
  (val_definition (identifier) (number))
  (val_definition (identifier) (number))
  (val_definition (identifier) (number))
  (val_definition (identifier) (number)))

==========================
Boolean literals
==========================

val myBool = true

def foo(a: Boolean = false) = a && true

---

(compilation_unit
	(val_definition (identifier) (boolean_literal))
	(function_definition
		(identifier)
		(parameters (parameter
			(identifier)
			(type_identifier)
			(boolean_literal)))
		(infix_expression
			(identifier)
			(identifier)
			(boolean_literal))))

==========================
Character literals
==========================

val myChar = 'c'

val otherChar = '\u0041'

val anotherChar = '\n'

def foo(a: Char = 'c') = a + 'd'

---

(compilation_unit
	(val_definition (identifier) (character_literal))
	(val_definition (identifier) (character_literal))
	(val_definition (identifier) (character_literal))
	(function_definition
		(identifier)
		(parameters (parameter
			(identifier)
			(type_identifier)
			(character_literal)))
		(infix_expression
			(identifier)
			(identifier)
			(character_literal))))

==========================
Symobl literals
==========================

val mySymbol = 'c

val myOtherSymbol = 'thing

---

(compilation_unit
	(val_definition (identifier) (symbol_literal))
	(val_definition (identifier) (symbol_literal)))
