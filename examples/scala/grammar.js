// This file was autogenerated by parse_grammar.lua from scala.ebnf.

/*
 * inline constants: 
 * Block               := (BlockStat? (semi BlockStat)*) ResultExpr?
 * ClassParamClauses   := ClassParamClause* (nl? '(' 'implicit' ClassParams ')')?

 * ClassQualifier      := [\[]$id[\]]
 *     ([\[]([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`][\]])
 * ClassTemplateOpt    := 'extends' ClassTemplate | ('extends'? TemplateBody)?
 * ParamClauses        := ParamClause* (nl? '(' 'implicit' Params ')')?
 * TraitTemplateOpt    := 'extends' TraitTemplate | ('extends'? TemplateBody)?
 * charEscapeSeq       := \\[btnfr"'\\]
 * charNoBQOrNL        := [\u0020-\u005f\u0061-\u007f]
 * decimalNumeral      := [0-9]+
 * escapeSeq           := ($unicodeEscape|$charEscapeSeq)
 *     ((\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))
 * exponentPart        := ([Ee][+-]?$decimalNumeral)
 *     (([Ee][+-]?[0-9]+))
 * floatType           := [FfDd]
 * fpLit1              := $decimalNumeral[.]$decimalNumeral$exponentPart?$floatType?
 *     ([0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?)
 * fpLit2              := [.]$decimalNumeral$exponentPart?$floatType?
 *     ([.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?)
 * fpLit3              := $decimalNumeral$exponentPart?$floatType
 *     ([0-9]+([Ee][+-]?[0-9]+)?[FfDd])
 * fpLit4              := $decimalNumeral$exponentPart$floatType?
 *     ([0-9]+([Ee][+-]?[0-9]+)[FfDd]?)
 * hexDigit            := [0-9a-fA-F]
 * hexNumeral          := 0[xX]$hexDigit+
 *     (0[xX][0-9a-fA-F]+)
 * id                  := $plainid|[`]($charNoBQOrNL|$escapeSeq)*[`]
 *     (([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`])
 * idrest              := [$(letter)0-9]*(_$opchar+)?
 *     ([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?)
 * letter              := $upperChars$lowerChars
 *     (\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F)
 * lowerChars          := $lowerChars1$lowerChars2$lowerChars3
 *     (\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F)
 * lowerChars1         := \p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4
 * lowerChars2         := \u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C
 * lowerChars3         := \u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F
 * opchar              := [!#%&*+\u002d/\\:<=>?@\u005e\u007c~]
 * plainid             := ($upper$idrest|$varidRegex|$opchar+)
 *     (([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+))
 * unicodeEscape       := \\u+$hexDigit$hexDigit$hexDigit$hexDigit
 *     (\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
 * upper               := [$upperChars]
 *     ([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$])
 * upperChars          := \p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$
 * varidRegex          := [$lowerChars_]$idrest
 *     ([\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?)
 */

module.exports = grammar({
  name: 'scala',

  /*
   * scala.ebnf:1 
   * externals ::= { multi_comment }
   */
  externals: $ => [$._multi_comment],
  /*
   * scala.ebnf:3 
   * extras    ::= { whiteSpace comment }
   */
  extras: $ => [$._whiteSpace, $._comment],
  /*
   * scala.ebnf:5 
   * word      ::= identifier
   */
  word: $ => $._identifier,
  /*
   * scala.ebnf:7 
   * conflicts ::= { { Literal } { Refinement } }
   */
  conflicts: $ => [[$.Literal], [$.Refinement]],
  rules: {
    /*
     * scala.ebnf:10-11 
     * Foo ::= TemplateStat (semi ("" | TemplateStat))*
     * ;SourceFile           ::= CompilationUnit | TopStatSeq | Expr*
     */
    Foo: $ => seq($.TemplateStat, repeat(seq($._semi, choice("", $.TemplateStat)))),
    /*
     * scala.ebnf:12 
     * CompilationUnit      ::= ('package' QualId semi)+ TopStatSeq
     */
    CompilationUnit: $ => seq(repeat1(seq('package', $.QualId, $._semi)), $.TopStatSeq),
    /*
     * scala.ebnf:13 
     * whiteSpace           ::= /[\u0020\u0009\u000D\u000A]/
     */
    _whiteSpace: $ => /[\u0020\u0009\u000D\u000A]/,
    /*
     * scala.ebnf:20 
     * lower                ::= [$lowerChars]
     */
    _lower: $ => /[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F]/,
    /*
     * scala.ebnf:22 
     * paren                ::= [(){}\[\]]
     */
    _paren: $ => /[(){}\[\]]/,
    /*
     * scala.ebnf:29 
     * varid                ::= /$varidRegex/
     */
    _varid: $ => /[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?/,
    /*
     * scala.ebnf:30 
     * boundvarid           ::= /($varidRegex|[`]$varidRegex[`])/
     */
    _boundvarid: $ => /([\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[`][\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?[`])/,
    /*
     * scala.ebnf:34 
     * identifier           ::= /($opchar+|$id|$varidRegex|[`]$varidRegex[`])/
     */
    _identifier: $ => /([!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+|([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[`][\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?[`])/,
    /*
     * scala.ebnf:37 
     * integerLiteral       ::= /($decimalNumeral|$hexNumeral)[Ll]?/
     */
    _integerLiteral: $ => /([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?/,
    /*
     * scala.ebnf:38 
     * decimalNumeral       ::= /[0-9]+/
     */
    _decimalNumeral: $ => /[0-9]+/,
    /*
     * scala.ebnf:44 
     * floatingPointLiteral ::= /($fpLit1|$fpLit2|$fpLit3|$fpLit4)/
     */
    _floatingPointLiteral: $ => /([0-9]+[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[.][0-9]+([Ee][+-]?[0-9]+)?[FfDd]?|[0-9]+([Ee][+-]?[0-9]+)?[FfDd]|[0-9]+([Ee][+-]?[0-9]+)[FfDd]?)/,
    /*
     * scala.ebnf:47 
     * booleanLiteral       ::= "true" | "false"
     */
    _booleanLiteral: $ => choice("true", "false"),
    /*
     * scala.ebnf:48 
     * characterLiteral     ::= /'([\u0020-\u0026\u0028-\u007f]|\\[btnfr"'\\])'/
     */
    _characterLiteral: $ => /'([\u0020-\u0026\u0028-\u007f]|\\[btnfr"'\\])'/,
    /*
     * scala.ebnf:49 
     * rawString            ::= /"""("?"?[^"])*"*"""/
     */
    _rawString: $ => /"""("?"?[^"])*"*"""/,
    /*
     * scala.ebnf:50 
     * stringLiteral        ::= string | rawString
     */
    _stringLiteral: $ => choice($._string, $._rawString),
    /*
     * scala.ebnf:51 
     * string               ::= /"([^"\u000A]|$escapeSeq)*"/
     */
    _string: $ => /"([^"\u000A]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*"/,
    /*
     * scala.ebnf:52 
     * charMinusQuoteDollar ::= [ !#\u0025-\u007f]
     */
    _charMinusQuoteDollar: $ => /[ !#\u0025-\u007f]/,
    /*
     * scala.ebnf:53-54 
     * interpolatedString   ::= alphaid '"' (charMinusQuoteDollar | escape)+ '"'
     *                        | alphaid '"""' ('"'? '"'? charMinusQuoteDollar | escape)* '"'? '"""'
     */
    _interpolatedString: $ => choice(
                                seq($._alphaid, '"', repeat1(choice($._charMinusQuoteDollar, $._escape)), '"'),
                                seq(
                                  $._alphaid,
                                  '"""',
                                  repeat(choice(seq(optional('"'), optional('"'), $._charMinusQuoteDollar), $._escape)),
                                  optional('"'),
                                  '"""'
                                )
                              ),
    /*
     * scala.ebnf:55 
     * escape               ::= /(\$\$|\$$id)/ | BlockExpr
     */
    _escape: $ => choice(
                    /(\$\$|\$([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`])/,
                    $.BlockExpr
                  ),
    /*
     * scala.ebnf:56 
     * alphaid              ::= $upper $idrest | varid
     */
    _alphaid: $ => choice(
                     seq(
                       /[\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$]/,
                       repeat(
                         /[\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]/
                       ),
                       optional(repeat1(/[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]/))
                     ),
                     $._varid
                   ),
    /*
     * scala.ebnf:57 
     * symbolLiteral        ::= /[']$plainid/
     */
    _symbolLiteral: $ => /[']([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)/,
    /*
     * scala.ebnf:58 
     * comment              ::= "/*" multi_comment "*∕" | "//" /.*∕
     */
    _comment: $ => choice(seq("/*", $._multi_comment, "*/"), seq("//", /.*/)),
    /*
     * scala.ebnf:59 
     * nl                   ::= '\\n'
     */
    _nl: $ => '\\n',
    /*
     * scala.ebnf:60 
     * semi                 ::= ';' | nl+
     */
    _semi: $ => choice(';', repeat1($._nl)),
    /*
     * scala.ebnf:63-70 
     * Literal              ::= '-'? integerLiteral
     *                        |  '-'? floatingPointLiteral
     *                        |  booleanLiteral
     *                        |  characterLiteral
     *                        |  stringLiteral
     *                    ; |  interpolatedString
     *                        |  symbolLiteral
     *                        |  "null"
     */
    Literal: $ => choice(
                    seq(optional('-'), $._integerLiteral),
                    seq(optional('-'), $._floatingPointLiteral),
                    $._booleanLiteral,
                    $._characterLiteral,
                    $._stringLiteral,
                    $._symbolLiteral,
                    "null"
                  ),
    /*
     * scala.ebnf:72 
     * QualId               ::= /$id([.]$id)*∕
     */
    QualId: $ => /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]([.]([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`])*/,
    /*
     * scala.ebnf:73 
     * ids                  ::= /$id(,$id)*∕
     */
    _ids: $ => /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`](,([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`])*/,
    /*
     * scala.ebnf:75-76 
     * Path                 ::= StableId
     *                        |  (/$id/ '.')? 'this'
     */
    Path: $ => choice(
                 $.StableId,
                 seq(
                   optional(
                     seq(
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       '.'
                     )
                   ),
                   'this'
                 )
               ),
    /*
     * scala.ebnf:77-79 
     * StableId             ::= 10(/$id/
     *                        |  Path '.' /$id/
     *                        |  (/$id/ '.')? 'super' /$ClassQualifier/? '.' /$id/)
     */
    StableId: $ => prec(
                     10,
                     choice(
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       seq(
                         $.Path,
                         '.',
                         /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                       ),
                       seq(
                         optional(
                           seq(
                             /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                             '.'
                           )
                         ),
                         'super',
                         optional(
                           /[\[]([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`][\]]/
                         ),
                         '.',
                         /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                       )
                     )
                   ),
    /*
     * scala.ebnf:81 
     * ValDef               ::= "val" /$id/ "=" Literal
     */
    ValDef: $ => seq(
                   "val",
                   /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                   "=",
                   $.Literal
                 ),
    /*
     * scala.ebnf:83 
     * Type                 ::= 10(FunctionArgTypes '=>' Type | InfixType ExistentialClause?)
     */
    Type: $ => prec(
                 10,
                 choice(
                   seq($.FunctionArgTypes, '=>', $.Type),
                   seq($.InfixType, optional($.ExistentialClause))
                 )
               ),
    /*
     * scala.ebnf:84-85 
     * FunctionArgTypes     ::= InfixType
     *                        | '(' ParamType (',' ParamType )*? ')'
     */
    FunctionArgTypes: $ => choice($.InfixType, seq('(', $.ParamType, optional(repeat(seq(',', $.ParamType))), ')')),
    /*
     * scala.ebnf:86 
     * ExistentialClause    ::= 'forSome' '{' ExistentialDcl (semi ExistentialDcl)* '}'
     */
    ExistentialClause: $ => seq('forSome', '{', $.ExistentialDcl, repeat(seq($._semi, $.ExistentialDcl)), '}'),
    /*
     * scala.ebnf:87-88 
     * ExistentialDcl       ::= 'type' TypeDcl
     *                        |  'val' ValDcl
     */
    ExistentialDcl: $ => choice(seq('type', $.TypeDcl), seq('val', $.ValDcl)),
    /*
     * scala.ebnf:89 
     * InfixType            ::= >(CompoundType (/$id/ nl? CompoundType)*)
     */
    InfixType: $ => prec.right(
                      seq(
                        $.CompoundType,
                        repeat(
                          seq(
                            /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                            optional($._nl),
                            $.CompoundType
                          )
                        )
                      )
                    ),
    /*
     * scala.ebnf:90 
     * CompoundType         ::= >(AnnotType ('with' AnnotType)* Refinement? | Refinement)
     */
    CompoundType: $ => prec.right(
                         choice(
                           seq($.AnnotType, repeat(seq('with', $.AnnotType)), optional($.Refinement)),
                           $.Refinement
                         )
                       ),
    /*
     * scala.ebnf:91 
     * AnnotType            ::= >(SimpleType Annotation*)
     */
    AnnotType: $ => prec.right(seq($.SimpleType, repeat($.Annotation))),
    /*
     * scala.ebnf:92-96 
     * SimpleType           ::= 3(SimpleType TypeArgs
     *                        |  SimpleType '#' /$id/
     *                        |  StableId
     *                        |  Path '.' 'type'
     *                        |  '(' Types ')')
     */
    SimpleType: $ => prec(
                       3,
                       choice(
                         seq($.SimpleType, $.TypeArgs),
                         seq(
                           $.SimpleType,
                           '#',
                           /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                         ),
                         $.StableId,
                         seq($.Path, '.', 'type'),
                         seq('(', $.Types, ')')
                       )
                     ),
    /*
     * scala.ebnf:97 
     * TypeArgs             ::= '[' Types ']'
     */
    TypeArgs: $ => seq('[', $.Types, ']'),
    /*
     * scala.ebnf:98 
     * Types                ::= Type (',' Type)*
     */
    Types: $ => seq($.Type, repeat(seq(',', $.Type))),
    /*
     * scala.ebnf:99 
     * Refinement           ::= nl? '{' RefineStat? (semi RefineStat)* '}'
     */
    Refinement: $ => seq(
                       optional($._nl),
                       '{',
                       optional($.RefineStat),
                       repeat(seq($._semi, $.RefineStat)),
                       '}'
                     ),
    /*
     * scala.ebnf:100-101 
     * RefineStat           ::= Dcl
     *                        |  'type' TypeDef
     */
    RefineStat: $ => choice($.Dcl, seq('type', $.TypeDef)),
    /*
     * scala.ebnf:102 
     * TypePat              ::= Type
     */
    TypePat: $ => $.Type,
    /*
     * scala.ebnf:104-106 
     * Ascription           ::= >(':' InfixType
     *                        |  ':' Annotation Annotation*
     *                        |  ':' '_' '*')
     */
    Ascription: $ => prec.right(
                       choice(
                         seq(':', $.InfixType),
                         seq(':', $.Annotation, repeat($.Annotation)),
                         seq(':', '_', '*')
                       )
                     ),
    /*
     * scala.ebnf:108 
     * IfExpression         ::= >('if' '(' Expr ')' nl* Expr (semi? 'else' Expr)?)
     */
    IfExpression: $ => prec.right(
                         seq(
                           'if',
                           '(',
                           $.Expr,
                           ')',
                           repeat($._nl),
                           $.Expr,
                           optional(seq(optional($._semi), 'else', $.Expr))
                         )
                       ),
    /*
     * scala.ebnf:109 
     * WhileExpression      ::= 'while' '(' Expr ')' nl* Expr
     */
    WhileExpression: $ => seq('while', '(', $.Expr, ')', repeat($._nl), $.Expr),
    /*
     * scala.ebnf:110 
     * TryExpression        ::= >('try' Expr ('catch' Expr)? ('finally' Expr)?)
     */
    TryExpression: $ => prec.right(
                          seq('try', $.Expr, optional(seq('catch', $.Expr)), optional(seq('finally', $.Expr)))
                        ),
    /*
     * scala.ebnf:111 
     * DoExpression         ::= >('do' Expr semi? 'while' '(' Expr ')')
     */
    DoExpression: $ => prec.right(seq('do', $.Expr, optional($._semi), 'while', '(', $.Expr, ')')),
    /*
     * scala.ebnf:112 
     * ThrowExpression      ::= 'throw' Expr
     */
    ThrowExpression: $ => seq('throw', $.Expr),
    /*
     * scala.ebnf:113 
     * ReturnExpression     ::= >('return' Expr?)
     */
    ReturnExpression: $ => prec.right(seq('return', optional($.Expr))),
    /*
     * scala.ebnf:114 
     * ForExpression        ::= 'for' ('(' Enumerators ')' | '{' Enumerators '}') nl* 'yield'? Expr
     */
    ForExpression: $ => seq(
                          'for',
                          choice(seq('(', $.Enumerators, ')'), seq('{', $.Enumerators, '}')),
                          repeat($._nl),
                          optional('yield'),
                          $.Expr
                        ),
    /*
     * scala.ebnf:115 
     * CaseExpression       ::= <(PostfixExpr 'match' '{' CaseClauses '}')
     */
    CaseExpression: $ => prec.left(seq($.PostfixExpr, 'match', '{', $.CaseClauses, '}')),
    /*
     * scala.ebnf:116 
     * Expr                 ::= (Bindings | 'implicit'? /$id/ | '_') '=>' Expr | Expr1
     */
    Expr: $ => choice(
                 seq(
                   choice(
                     $.Bindings,
                     seq(
                       optional('implicit'),
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                     ),
                     '_'
                   ),
                   '=>',
                   $.Expr
                 ),
                 $.Expr1
               ),
    /*
     * scala.ebnf:117-126 
     * Expr1                ::= IfExpression
     *                        | WhileExpression
     *                        | TryExpression
     *                        | DoExpression
     *                        | ThrowExpression
     *                        | ReturnExpression
     *                        | ForExpression
     *                        | PostfixExpr
     *                        | PostfixExpr Ascription
     *                        | CaseExpression
     */
    Expr1: $ => choice(
                  $.IfExpression,
                  $.WhileExpression,
                  $.TryExpression,
                  $.DoExpression,
                  $.ThrowExpression,
                  $.ReturnExpression,
                  $.ForExpression,
                  $.PostfixExpr,
                  seq($.PostfixExpr, $.Ascription),
                  $.CaseExpression
                ),
    /*
     * scala.ebnf:127 
     * PostfixExpr          ::= InfixExpr /$id\\n?/?
     */
    PostfixExpr: $ => seq(
                        $.InfixExpr,
                        optional(
                          /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]\\n?/
                        )
                      ),
    /*
     * scala.ebnf:128 
     * InfixExpr            ::= <2((PrefixExpr | InfixExpr /$id\\n?/? InfixExpr))
     */
    InfixExpr: $ => prec.left(
                      2,
                      choice(
                        $.PrefixExpr,
                        seq(
                          $.InfixExpr,
                          optional(
                            /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]\\n?/
                          ),
                          $.InfixExpr
                        )
                      )
                    ),
    /*
     * scala.ebnf:129 
     * PrefixExpr           ::= ('-' | '+' | '~' | '!')? SimpleExpr
     */
    PrefixExpr: $ => seq(optional(choice('-', '+', '~', '!')), $.SimpleExpr),
    /*
     * scala.ebnf:130-132 
     * SimpleExpr           ::= >('new' (ClassTemplate | TemplateBody)
     *                        |  BlockExpr
     *                        |  SimpleExpr1 '_'?)
     */
    SimpleExpr: $ => prec.right(
                       choice(
                         seq('new', choice($.ClassTemplate, $.TemplateBody)),
                         $.BlockExpr,
                         seq($.SimpleExpr1, optional('_'))
                       )
                     ),
    /*
     * scala.ebnf:133-139 
     * SimpleExpr1          ::= >(Literal
     *                        |  Path
     *                        |  '_'
     *                        |  '(' Exprs? ')'
     *                        |  SimpleExpr '.' /$id/
     *                        |  SimpleExpr TypeArgs
     *                        |  SimpleExpr1 ArgumentExprs)
     */
    SimpleExpr1: $ => prec.right(
                        choice(
                          $.Literal,
                          $.Path,
                          '_',
                          seq('(', optional($.Exprs), ')'),
                          seq(
                            $.SimpleExpr,
                            '.',
                            /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                          ),
                          seq($.SimpleExpr, $.TypeArgs),
                          seq($.SimpleExpr1, $.ArgumentExprs)
                        )
                      ),
    /*
     * scala.ebnf:140 
     * Exprs                ::= >(Expr (',' Expr)*)
     */
    Exprs: $ => prec.right(seq($.Expr, repeat(seq(',', $.Expr)))),
    /*
     * scala.ebnf:141-143 
     * ArgumentExprs        ::= '(' Exprs? ')'
     *                        |  '(' (Exprs ',')? PostfixExpr ':' '_' '*' ')'
     *                        |  nl? BlockExpr
     */
    ArgumentExprs: $ => choice(
                          seq('(', optional($.Exprs), ')'),
                          seq('(', optional(seq($.Exprs, ',')), $.PostfixExpr, ':', '_', '*', ')'),
                          seq(optional($._nl), $.BlockExpr)
                        ),
    /*
     * scala.ebnf:144-145 
     * BlockExpr            ::= '{' CaseClauses '}'
     *                        |  '{' $Block '}'
     */
    BlockExpr: $ => choice(
                      seq('{', $.CaseClauses, '}'),
                      seq(
                        '{',
                        seq(optional($.BlockStat), repeat(seq($._semi, $.BlockStat))),
                        optional($.ResultExpr),
                        '}'
                      )
                    ),
    /*
     * scala.ebnf:147-150 
     * BlockStat            ::= 2(Import
     *                        |  Annotation* 'implicit'? 'lazy'? Def
     *                        |  Annotation* LocalModifier* TmplDef
     *                        |  Expr1)
     */
    BlockStat: $ => prec(
                      2,
                      choice(
                        $.Import,
                        seq(repeat($.Annotation), optional('implicit'), optional('lazy'), $.Def),
                        seq(repeat($.Annotation), repeat($.LocalModifier), $.TmplDef),
                        $.Expr1
                      )
                    ),
    /*
     * scala.ebnf:151-152 
     * ResultExpr           ::= Expr1
     *                        |  (Bindings | ('implicit'? /$id/ | '_') ':' CompoundType) '=>' $Block
     */
    ResultExpr: $ => choice(
                       $.Expr1,
                       seq(
                         choice(
                           $.Bindings,
                           seq(
                             choice(
                               seq(
                                 optional('implicit'),
                                 /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                               ),
                               '_'
                             ),
                             ':',
                             $.CompoundType
                           )
                         ),
                         '=>',
                         seq(optional($.BlockStat), repeat(seq($._semi, $.BlockStat))),
                         optional($.ResultExpr)
                       )
                     ),
    /*
     * scala.ebnf:154 
     * Enumerators          ::= Generator (semi Generator)*
     */
    Enumerators: $ => seq($.Generator, repeat(seq($._semi, $.Generator))),
    /*
     * scala.ebnf:155 
     * Generator            ::= >(Pattern1 '<-' Expr (semi? Guard | semi Pattern1 '=' Expr)*)
     */
    Generator: $ => prec.right(
                      seq(
                        $.Pattern1,
                        '<-',
                        $.Expr,
                        repeat(choice(seq(optional($._semi), $.Guard), seq($._semi, $.Pattern1, '=', $.Expr)))
                      )
                    ),
    /*
     * scala.ebnf:157 
     * CaseClauses          ::= CaseClause+
     */
    CaseClauses: $ => repeat1($.CaseClause),
    /*
     * scala.ebnf:158 
     * CaseClause           ::= <(/case/ Literal Guard? /=>/ $Block)
     */
    CaseClause: $ => prec.left(
                       seq(
                         /case/,
                         $.Literal,
                         optional($.Guard),
                         /=>/,
                         seq(optional($.BlockStat), repeat(seq($._semi, $.BlockStat))),
                         optional($.ResultExpr)
                       )
                     ),
    /*
     * scala.ebnf:159 
     * Guard                ::= 'if' PostfixExpr
     */
    Guard: $ => seq('if', $.PostfixExpr),
    /*
     * scala.ebnf:161 
     * Pattern              ::= Pattern1 ('|' Pattern1)*
     */
    Pattern: $ => seq($.Pattern1, repeat(seq('|', $.Pattern1))),
    /*
     * scala.ebnf:162-164 
     * Pattern1             ::= boundvarid ':' TypePat
     *                        |  '_' ':' TypePat
     *                        |  Pattern2
     */
    Pattern1: $ => choice(seq($._boundvarid, ':', $.TypePat), seq('_', ':', $.TypePat), $.Pattern2),
    /*
     * scala.ebnf:165-166 
     * Pattern2             ::= /$id/ ('@' Pattern3)?
     *                        |  Pattern3
     */
    Pattern2: $ => choice(
                     seq(
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       optional(seq('@', $.Pattern3))
                     ),
                     $.Pattern3
                   ),
    /*
     * scala.ebnf:167 
     * Pattern3             ::= >(SimplePattern | SimplePattern /$id/ nl?  SimplePattern*)
     */
    Pattern3: $ => prec.right(
                     choice(
                       $.SimplePattern,
                       seq(
                         $.SimplePattern,
                         /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                         optional($._nl),
                         repeat($.SimplePattern)
                       )
                     )
                   ),
    /*
     * scala.ebnf:168-174 
     * SimplePattern        ::= >('_'
     *                        |  varid
     *                        |  Literal
     *                        |  StableId
     *                        |  StableId '(' Patterns? ')'
     *                        |  StableId '(' (Patterns ',')? (/$id/ '@')? '_' '*' ')'
     *                        |  '(' Patterns? ')')
     */
    SimplePattern: $ => prec.right(
                          choice(
                            '_',
                            $._varid,
                            $.Literal,
                            $.StableId,
                            seq($.StableId, '(', optional($.Patterns), ')'),
                            seq(
                              $.StableId,
                              '(',
                              optional(seq($.Patterns, ',')),
                              optional(
                                seq(
                                  /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                                  '@'
                                )
                              ),
                              '_',
                              '*',
                              ')'
                            ),
                            seq('(', optional($.Patterns), ')')
                          )
                        ),
    /*
     * scala.ebnf:175 
     * Patterns             ::= >(Pattern (',' Patterns)?  |  '_' '*')
     */
    Patterns: $ => prec.right(choice(seq($.Pattern, optional(seq(',', $.Patterns))), seq('_', '*'))),
    /*
     * scala.ebnf:177 
     * TypeParamClause      ::= '[' VariantTypeParam (',' VariantTypeParam)* ']'
     */
    TypeParamClause: $ => seq('[', $.VariantTypeParam, repeat(seq(',', $.VariantTypeParam)), ']'),
    /*
     * scala.ebnf:178 
     * FunTypeParamClause   ::= '[' TypeParam (',' TypeParam)* ']'
     */
    FunTypeParamClause: $ => seq('[', $.TypeParam, repeat(seq(',', $.TypeParam)), ']'),
    /*
     * scala.ebnf:179 
     * VariantTypeParam     ::= Annotation* ('+' | '-')? TypeParam
     */
    VariantTypeParam: $ => seq(repeat($.Annotation), optional(choice('+', '-')), $.TypeParam),
    /*
     * scala.ebnf:180-181 
     * TypeParam            ::= (/$id/ | '_') TypeParamClause? ('>:' Type)? ('<:' Type)?
     *                        ('<%' Type)* (':' Type)*
     */
    TypeParam: $ => seq(
                      choice(
                        /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                        '_'
                      ),
                      optional($.TypeParamClause),
                      optional(seq('>:', $.Type)),
                      optional(seq('<:', $.Type)),
                      repeat(seq('<%', $.Type)),
                      repeat(seq(':', $.Type))
                    ),
    /*
     * scala.ebnf:183 
     * ParamClause          ::= nl? '(' Params? ')'
     */
    ParamClause: $ => seq(optional($._nl), '(', optional($.Params), ')'),
    /*
     * scala.ebnf:184 
     * Params               ::= Param (',' Param)*
     */
    Params: $ => seq($.Param, repeat(seq(',', $.Param))),
    /*
     * scala.ebnf:185 
     * Param                ::= Annotation* /$id/ (':' ParamType)? ('=' Expr)?
     */
    Param: $ => seq(
                  repeat($.Annotation),
                  /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                  optional(seq(':', $.ParamType)),
                  optional(seq('=', $.Expr))
                ),
    /*
     * scala.ebnf:186 
     * ParamType            ::= >10(Type | '=>' Type |  Type '*')
     */
    ParamType: $ => prec.right(10, choice($.Type, seq('=>', $.Type), seq($.Type, '*'))),
    /*
     * scala.ebnf:189 
     * ClassParamClause     ::= nl? '(' ClassParams? ')'
     */
    ClassParamClause: $ => seq(optional($._nl), '(', optional($.ClassParams), ')'),
    /*
     * scala.ebnf:190 
     * ClassParams          ::= ClassParam (',' ClassParam)*
     */
    ClassParams: $ => seq($.ClassParam, repeat(seq(',', $.ClassParam))),
    /*
     * scala.ebnf:191-192 
     * ClassParam           ::= Annotation* Modifier* (('val' | 'var'))?
     *                        /$id/ ':' ParamType ('=' Expr)?
     */
    ClassParam: $ => seq(
                       repeat($.Annotation),
                       repeat($.Modifier),
                       optional(choice('val', 'var')),
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       ':',
                       $.ParamType,
                       optional(seq('=', $.Expr))
                     ),
    /*
     * scala.ebnf:193 
     * Bindings             ::= '(' Binding (',' Binding)* ')'
     */
    Bindings: $ => seq('(', $.Binding, repeat(seq(',', $.Binding)), ')'),
    /*
     * scala.ebnf:194 
     * Binding              ::= /$id[_]/ (':' Type)?
     */
    Binding: $ => seq(
                    /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`][_]/,
                    optional(seq(':', $.Type))
                  ),
    /*
     * scala.ebnf:196-198 
     * Modifier             ::= LocalModifier
     *                        |  AccessModifier
     *                        |  'override'
     */
    Modifier: $ => choice($.LocalModifier, $.AccessModifier, 'override'),
    /*
     * scala.ebnf:199 
     * LocalModifier        ::= /(abstract|final|sealed|implicit|lazy)/
     */
    LocalModifier: $ => /(abstract|final|sealed|implicit|lazy)/,
    /*
     * scala.ebnf:200 
     * AccessModifier       ::= /(private|protected)/ AccessQualifier?
     */
    AccessModifier: $ => seq(/(private|protected)/, optional($.AccessQualifier)),
    /*
     * scala.ebnf:201 
     * AccessQualifier      ::= '[' (/$id/ | 'this') ']'
     */
    AccessQualifier: $ => seq(
                            '[',
                            choice(
                              /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                              'this'
                            ),
                            ']'
                          ),
    /*
     * scala.ebnf:203 
     * Annotation           ::= >('@' SimpleType ArgumentExprs*)
     */
    Annotation: $ => prec.right(seq('@', $.SimpleType, repeat($.ArgumentExprs))),
    /*
     * scala.ebnf:204 
     * ConstrAnnotation     ::= '@' SimpleType ArgumentExprs
     */
    ConstrAnnotation: $ => seq('@', $.SimpleType, $.ArgumentExprs),
    /*
     * scala.ebnf:206 
     * TemplateBody         ::= nl? '{' SelfType? TemplateStat? (semi TemplateStat)* '}'
     */
    TemplateBody: $ => seq(
                         optional($._nl),
                         '{',
                         optional($.SelfType),
                         optional($.TemplateStat),
                         repeat(seq($._semi, $.TemplateStat)),
                         '}'
                       ),
    /*
     * scala.ebnf:207-210 
     * TemplateStat         ::= Import
     *                        |  (Annotation nl?)* Modifier* Def
     *                        |  (Annotation nl?)* Modifier* Dcl
     *                        |  Expr
     */
    TemplateStat: $ => choice(
                         $.Import,
                         seq(repeat(seq($.Annotation, optional($._nl))), repeat($.Modifier), $.Def),
                         seq(repeat(seq($.Annotation, optional($._nl))), repeat($.Modifier), $.Dcl),
                         $.Expr
                       ),
    /*
     * scala.ebnf:211 
     * SelfType             ::= 2(/$id/ (':' Type)? '=>' |  'this' ':' Type '=>')
     */
    SelfType: $ => prec(
                     2,
                     choice(
                       seq(
                         /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                         optional(seq(':', $.Type)),
                         '=>'
                       ),
                       seq('this', ':', $.Type, '=>')
                     )
                   ),
    /*
     * scala.ebnf:213 
     * Import               ::= 'import' ImportExpr (',' ImportExpr)*
     */
    Import: $ => seq('import', $.ImportExpr, repeat(seq(',', $.ImportExpr))),
    /*
     * scala.ebnf:214 
     * ImportExpr           ::= 1((StableId '.') (/$id/ | '_' | ImportSelectors))
     */
    ImportExpr: $ => prec(
                       1,
                       seq(
                         seq($.StableId, '.'),
                         choice(
                           /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                           '_',
                           $.ImportSelectors
                         )
                       )
                     ),
    /*
     * scala.ebnf:215 
     * ImportSelectors      ::= '{' (ImportSelector ',')* (ImportSelector | '_') '}'
     */
    ImportSelectors: $ => seq('{', repeat(seq($.ImportSelector, ',')), choice($.ImportSelector, '_'), '}'),
    /*
     * scala.ebnf:216 
     * ImportSelector       ::= /$id/ ('=>' /$id/ | '=>' '_')?
     */
    ImportSelector: $ => seq(
                           /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                           optional(
                             choice(
                               seq(
                                 '=>',
                                 /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/
                               ),
                               seq('=>', '_')
                             )
                           )
                         ),
    /*
     * scala.ebnf:218-221 
     * Dcl                  ::= 'val' ValDcl
     *                        |  'var' VarDcl
     *                        |  'def' FunDcl
     *                        |  'type' nl* TypeDcl
     */
    Dcl: $ => choice(
                seq('val', $.ValDcl),
                seq('var', $.VarDcl),
                seq('def', $.FunDcl),
                seq('type', repeat($._nl), $.TypeDcl)
              ),
    /*
     * scala.ebnf:223 
     * ValDcl               ::= ids ':' Type
     */
    ValDcl: $ => seq($._ids, ':', $.Type),
    /*
     * scala.ebnf:224 
     * VarDcl               ::= ids ':' Type
     */
    VarDcl: $ => seq($._ids, ':', $.Type),
    /*
     * scala.ebnf:225 
     * FunDcl               ::= >(FunSig (':' Type)?)
     */
    FunDcl: $ => prec.right(seq($.FunSig, optional(seq(':', $.Type)))),
    /*
     * scala.ebnf:226 
     * FunSig               ::= >(/$id/ FunTypeParamClause? $ParamClauses)
     */
    FunSig: $ => prec.right(
                   seq(
                     /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                     optional($.FunTypeParamClause),
                     repeat($.ParamClause),
                     optional(seq(optional($._nl), '(', 'implicit', $.Params, ')'))
                   )
                 ),
    /*
     * scala.ebnf:227 
     * TypeDcl              ::= /$id/ TypeParamClause? ('>:' Type)? ('<:' Type)?
     */
    TypeDcl: $ => seq(
                    /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                    optional($.TypeParamClause),
                    optional(seq('>:', $.Type)),
                    optional(seq('<:', $.Type))
                  ),
    /*
     * scala.ebnf:229-230 
     * PatVarDef            ::= 'val' PatDef
     *                        |  'var' VarDef
     */
    PatVarDef: $ => choice(seq('val', $.PatDef), seq('var', $.VarDef)),
    /*
     * scala.ebnf:231-234 
     * Def                  ::= PatVarDef
     *                        |  'def' FunDef
     *                        |  'type' nl* TypeDef
     *                        |  TmplDef
     */
    Def: $ => choice(
                $.PatVarDef,
                seq('def', $.FunDef),
                seq('type', repeat($._nl), $.TypeDef),
                $.TmplDef
              ),
    /*
     * scala.ebnf:235 
     * PatDef               ::= Pattern2 (',' Pattern2)* (':' Type)? '=' Expr
     */
    PatDef: $ => seq(
                   $.Pattern2,
                   repeat(seq(',', $.Pattern2)),
                   optional(seq(':', $.Type)),
                   '=',
                   $.Expr
                 ),
    /*
     * scala.ebnf:236-237 
     * VarDef               ::= PatDef
     *                        |  ids ':' Type '=' '_'
     */
    VarDef: $ => choice($.PatDef, seq($._ids, ':', $.Type, '=', '_')),
    /*
     * scala.ebnf:238-240 
     * FunDef               ::= FunSig (':' Type)? '=' Expr
     *                        |  FunSig nl? '{' $Block '}'
     *                        |  'this' ParamClause $ParamClauses ('=' ConstrExpr | nl? ConstrBlock)
     */
    FunDef: $ => choice(
                   seq($.FunSig, optional(seq(':', $.Type)), '=', $.Expr),
                   seq(
                     $.FunSig,
                     optional($._nl),
                     '{',
                     seq(optional($.BlockStat), repeat(seq($._semi, $.BlockStat))),
                     optional($.ResultExpr),
                     '}'
                   ),
                   seq(
                     'this',
                     $.ParamClause,
                     repeat($.ParamClause),
                     optional(seq(optional($._nl), '(', 'implicit', $.Params, ')')),
                     choice(seq('=', $.ConstrExpr), seq(optional($._nl), $.ConstrBlock))
                   )
                 ),
    /*
     * scala.ebnf:241 
     * TypeDef              ::= /$id/ TypeParamClause? '=' Type
     */
    TypeDef: $ => seq(
                    /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                    optional($.TypeParamClause),
                    '=',
                    $.Type
                  ),
    /*
     * scala.ebnf:243-245 
     * TmplDef              ::= 'case'? 'class' ClassDef
     *                        |  'case'? 'object' ObjectDef
     *                        |  'trait' TraitDef
     */
    TmplDef: $ => choice(
                    seq(optional('case'), 'class', $.ClassDef),
                    seq(optional('case'), 'object', $.ObjectDef),
                    seq('trait', $.TraitDef)
                  ),
    /*
     * scala.ebnf:246-247 
     * ClassDef             ::= >(/$id/ TypeParamClause? ConstrAnnotation* AccessModifier?
     *                        ($ClassParamClauses) ($ClassTemplateOpt))
     */
    ClassDef: $ => prec.right(
                     seq(
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       optional($.TypeParamClause),
                       repeat($.ConstrAnnotation),
                       optional($.AccessModifier),
                       seq(
                         repeat($.ClassParamClause),
                         optional(seq(optional($._nl), '(', 'implicit', $.ClassParams, ')'))
                       ),
                       choice(
                         seq('extends', $.ClassTemplate),
                         optional(seq(optional('extends'), $.TemplateBody))
                       )
                     )
                   ),
    /*
     * scala.ebnf:248 
     * TraitDef             ::= >(/$id/ TypeParamClause? ($TraitTemplateOpt))
     */
    TraitDef: $ => prec.right(
                     seq(
                       /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                       optional($.TypeParamClause),
                       choice(
                         seq('extends', $.TraitTemplate),
                         optional(seq(optional('extends'), $.TemplateBody))
                       )
                     )
                   ),
    /*
     * scala.ebnf:249 
     * ObjectDef            ::= >(/$id/ ($ClassTemplateOpt))
     */
    ObjectDef: $ => prec.right(
                      seq(
                        /([\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F_][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9]*(_[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)?|[!#%&*+\u002d/\\:<=>?@\u005e\u007c~]+)|[`]([\u0020-\u005f\u0061-\u007f]|(\\u+[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[btnfr"'\\]))*[`]/,
                        choice(
                          seq('extends', $.ClassTemplate),
                          optional(seq(optional('extends'), $.TemplateBody))
                        )
                      )
                    ),
    /*
     * scala.ebnf:252 
     * ClassTemplate        ::= >(EarlyDefs? ClassParents TemplateBody?)
     */
    ClassTemplate: $ => prec.right(seq(optional($.EarlyDefs), $.ClassParents, optional($.TemplateBody))),
    /*
     * scala.ebnf:253 
     * TraitTemplate        ::= >(EarlyDefs? TraitParents TemplateBody?)
     */
    TraitTemplate: $ => prec.right(seq(optional($.EarlyDefs), $.TraitParents, optional($.TemplateBody))),
    /*
     * scala.ebnf:254 
     * ClassParents         ::= Constr ('with' AnnotType)*
     */
    ClassParents: $ => seq($.Constr, repeat(seq('with', $.AnnotType))),
    /*
     * scala.ebnf:255 
     * TraitParents         ::= AnnotType ('with' AnnotType)*
     */
    TraitParents: $ => seq($.AnnotType, repeat(seq('with', $.AnnotType))),
    /*
     * scala.ebnf:256 
     * Constr               ::= >(AnnotType ArgumentExprs*)
     */
    Constr: $ => prec.right(seq($.AnnotType, repeat($.ArgumentExprs))),
    /*
     * scala.ebnf:257 
     * EarlyDefs            ::= '{' (EarlyDef (semi EarlyDef)*)? '}' 'with'
     */
    EarlyDefs: $ => seq('{', optional(seq($.EarlyDef, repeat(seq($._semi, $.EarlyDef)))), '}', 'with'),
    /*
     * scala.ebnf:258 
     * EarlyDef             ::= 10((Annotation nl?)* Modifier* PatVarDef)
     */
    EarlyDef: $ => prec(
                     10,
                     seq(repeat(seq($.Annotation, optional($._nl))), repeat($.Modifier), $.PatVarDef)
                   ),
    /*
     * scala.ebnf:260-261 
     * ConstrExpr           ::= SelfInvocation
     *                        |  ConstrBlock
     */
    ConstrExpr: $ => choice($.SelfInvocation, $.ConstrBlock),
    /*
     * scala.ebnf:262 
     * ConstrBlock          ::= '{' SelfInvocation (semi BlockStat)* '}'
     */
    ConstrBlock: $ => seq('{', $.SelfInvocation, repeat(seq($._semi, $.BlockStat)), '}'),
    /*
     * scala.ebnf:263 
     * SelfInvocation       ::= >('this' ArgumentExprs ArgumentExprs*)
     */
    SelfInvocation: $ => prec.right(seq('this', $.ArgumentExprs, repeat($.ArgumentExprs))),
    /*
     * scala.ebnf:265 
     * TopStatSeq           ::= TopStat (semi TopStat)*
     */
    TopStatSeq: $ => seq($.TopStat, repeat(seq($._semi, $.TopStat))),
    /*
     * scala.ebnf:266-269 
     * TopStat              ::= (Annotation nl?)* Modifier* TmplDef
     *                        |  Import
     *                        |  Packaging
     *                        |  PackageObject
     */
    TopStat: $ => choice(
                    seq(repeat(seq($.Annotation, optional($._nl))), repeat($.Modifier), $.TmplDef),
                    $.Import,
                    $.Packaging,
                    $.PackageObject
                  ),
    /*
     * scala.ebnf:270 
     * Packaging            ::= 'package' QualId nl? '{' TopStatSeq '}'
     */
    Packaging: $ => seq('package', $.QualId, optional($._nl), '{', $.TopStatSeq, '}'),
    /*
     * scala.ebnf:271 
     * PackageObject        ::= 'package' 'object' ObjectDef
     */
    PackageObject: $ => seq('package', 'object', $.ObjectDef)
  }
});
