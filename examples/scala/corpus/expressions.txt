====================
If
====================
if (true) {
	1
	val z = foo"bar $baz"
} else {
  val x = 1
}

if (true) 1
else 2

if (true) {
1
}
else 3

if (true) {
  1
} else if (false) {
  2
} else {
  3
}

if (true) 1
else if (false) 2
else 3

{
	if (x)
		1 + 1
	else 1
}

def p(m: S): Unit = if (m) m
def foo = if (m) m else x
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (IfExpression (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (BlockExpr (Block (BlockStat
(Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))) (BlockStat (Def (PatVarDef (PatDef (Pattern2 (Pattern3
(SimplePattern (varid)))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (SimpleExpr1 (Path (StableId))))))))))))) (ResultExpr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (BlockExpr (Block (BlockStat (Def (PatVarDef (PatDef (Pattern2
(Pattern3 (SimplePattern (varid)))) (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))))))))))))))))))
(TemplateStat (Expr (Expr1 (IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))) (TemplateStat (Expr (Expr1 (IfExpression (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))
(Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (BlockExpr (Block
(BlockStat (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (SimpleExpr1 (Literal)))))))))))) (TemplateStat (Expr (Expr1
(IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal)))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (BlockExpr (Block (BlockStat (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))))))))))) (Expr (Expr1
(IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal)))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (BlockExpr (Block (BlockStat (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))))))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (BlockExpr (Block (BlockStat
(Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal))))))))))))))))))))))) (TemplateStat (Expr (Expr1 (IfExpression (Expr
(Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal)))))))) (Expr (Expr1 (IfExpression (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))
(Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal))))))))))))))) (TemplateStat (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (BlockExpr (Block (BlockStat (Expr1
(IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Path (StableId))))))))) (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))))) (ResultExpr (Expr1
(PostfixExpr (InfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal))))) (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))))))))) (TemplateStat (Def (FunDef (FunSig (ParamClause
(Params (Param (ParamType (Type (InfixType (CompoundType (AnnotType (SimpleType
(StableId))))))))))) (Type (InfixType (CompoundType (AnnotType (SimpleType
(StableId)))))) (Expr (Expr1 (IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Path (StableId))))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Path
(StableId))))))))))))))) (TemplateStat (Def (FunDef (FunSig) (Expr (Expr1
(IfExpression (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Path (StableId))))))))) (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Path (StableId))))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Path
(StableId))))))))))))))))


====================
While
====================
while(true) 1
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (WhileExpression (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))
(Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))))

====================
Try
====================
try 1
try 1 catch 2 finally 3
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (TryExpression (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))))))
(TemplateStat (Expr (Expr1 (TryExpression (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal))))))))
(Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))))

====================
Do
====================
do 1; while (true)
do 1 while (true)
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (DoExpression (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))))))) (TemplateStat (Expr (Expr1
(DoExpression (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal)))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (SimpleExpr1 (Literal)))))))))))))
====================
Throw
====================
throw new Exception("die")
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (ThrowExpression (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (ClassTemplate (ClassParents
(Constr (AnnotType (SimpleType (StableId))) (ArgumentExprs (Exprs (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal))))))))))))))))))))))))

====================
For loops
====================
for { x <- y } yield { Seq("foo", "bar") }
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (ForExpression (Enumerators (Generator
(Pattern1 (Pattern2 (Pattern3 (SimplePattern (varid))))) (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Path
(StableId))))))))))) (Expr (Expr1 (PostfixExpr (InfixExpr (PrefixExpr
(SimpleExpr (BlockExpr (Block (BlockStat (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (SimpleExpr1 (Path
(StableId))) (ArgumentExprs (Exprs (Expr (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))) (Expr (Expr1 (PostfixExpr
(InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal))))))))))))))))))))))))))))))

====================
Imports
====================
import Foo.{ z => _, x => y }
import a.b.c.d
import a.b.c.d._
--------------------
(SourceFile
	(TemplateStat (Import (ImportExpr (StableId) (ImportSelectors (ImportSelector) (ImportSelector)))))
	(TemplateStat (Import (ImportExpr (StableId (Path (StableId (Path (StableId))))))))
	(TemplateStat (Import (ImportExpr (StableId (Path (StableId (Path (StableId (Path (StableId)))))))))))

====================
Return
====================
return 1
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (ReturnExpression (Expr (Expr1
(PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))))))))

====================
Matches
====================
x match {
	case x =>
    1
    2
	case y =>
    3
}
--------------------
(SourceFile (TemplateStat (Expr (Expr1 (CaseExpression (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Path (StableId))))))) (CaseClauses
(CaseClause (Pattern (Pattern1 (Pattern2 (Pattern3 (SimplePattern (varid))))))
(Block (BlockStat (Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr
(SimpleExpr1 (Literal)))))))) (BlockStat (Expr1 (PostfixExpr (InfixExpr
(PrefixExpr (SimpleExpr (SimpleExpr1 (Literal)))))))))) (CaseClause (Pattern
(Pattern1 (Pattern2 (Pattern3 (SimplePattern (varid)))))) (Block (BlockStat
(Expr1 (PostfixExpr (InfixExpr (PrefixExpr (SimpleExpr (SimpleExpr1
(Literal)))))))) (BlockStat)))))))))
